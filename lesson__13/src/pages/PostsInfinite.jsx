import { Fragment, useEffect } from "react";
import { useGetPostsInfiniteQuery } from "@/api/postsApi";
import { useScrollToBottom } from "@/hooks/useScrollToBottom";

const PostsInfinitePage = () => {
    const {
        data,
        fetchNextPage,
        hasNextPage,
        isLoading,
        isFetchingNextPage,
        isSuccess
    } = useGetPostsInfiniteQuery();

    const isBottom = useScrollToBottom();

    useEffect(() => {
        if (
            isBottom &&
            hasNextPage &&
            !isLoading &&
            !isFetchingNextPage &&
            isSuccess
        ) {
            fetchNextPage();
        }
    }, [
        isBottom,
        hasNextPage,
        isLoading,
        isFetchingNextPage,
        isSuccess,
        fetchNextPage
    ]);

    if (isLoading) return <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>;
    if (!isSuccess) return <p>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.</p>;

    return (
        <div>
            <h2>–ù–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤</h2>
            <div className="post-list">
                {data.pages.map((page, i) => (
                    <Fragment key={i}>
                        {page.items.map((post) => (
                            <div className="post-list__item" key={post.id}>
                                <div className="post-list__title">
                                    {post.title}
                                </div>
                                <div className="post-list__actions">
                                    <span className="post-list__likes">
                                        üëç {post.likesNumber}
                                    </span>
                                    <span className="post-list__dislikes">
                                        üëé {post.dislikesNumber}
                                    </span>
                                </div>
                            </div>
                        ))}
                    </Fragment>
                ))}
            </div>
            {isFetchingNextPage && <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏...</p>}
            {!hasNextPage && <p>–ë—ñ–ª—å—à–µ –ø–æ—Å—Ç—ñ–≤ –Ω–µ–º–∞—î.</p>}
        </div>
    );
};

export default PostsInfinitePage;
