import React, { useState } from "react";
import {
    useGetPostsPQuery,
    useDeletePostMutation,
    useLikePostMutation,
    useDislikePostMutation
} from "../../api/postsApi";
import { useNavigate } from "react-router";
import styles from "./PostsList.module.css";
import ErrorMessage from "@/components/ErrorMessage";
import LoadingSpinner from "@/components/LoadingSpinner";

const PostsList = ({ onSelect }) => {
    const [page, setPage] = useState(1);
    const [actionError, setActionError] = useState("");

    const { data, isLoading, isError, error, isFetching } = useGetPostsPQuery({
        page,
        limit: 5
    });

    const [deletePost, { isLoading: isDeleting }] = useDeletePostMutation();
    const [likePost, { isLoading: isLiking }] = useLikePostMutation();
    const [dislikePost, { isLoading: isDisliking }] = useDislikePostMutation();

    const navigate = useNavigate();

    const handleLike = async (postId) => {
        try {
            setActionError("");
            await likePost(postId).unwrap();
        } catch (err) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ª–∞–π–∫—É:", err);
            setActionError("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –ª–∞–π–∫");
        }
    };

    const handleDislike = async (postId) => {
        try {
            setActionError("");
            await dislikePost(postId).unwrap();
        } catch (err) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –¥–∏–∑–ª–∞–π–∫—É:", err);
            setActionError("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –¥–∏–∑–ª–∞–π–∫");
        }
    };

    const handleDelete = async (postId) => {
        if (!window.confirm("–í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å—Ç?")) return;

        try {
            setActionError("");
            await deletePost(postId).unwrap();
        } catch (err) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", err);
            setActionError("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å—Ç");
        }
    };

    // –û—á–∏—â–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    React.useEffect(() => {
        setActionError("");
    }, [page]);

    if (isLoading) {
        return <LoadingSpinner message="–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤..." />;
    }

    if (isError) {
        return (
            <ErrorMessage
                title="–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤"
                message="–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç—ñ–≤"
                error={error}
                onRetry={() => window.location.reload()}
            />
        );
    }

    if (!data || !data.items || data.items.length === 0) {
        return (
            <div className="card post-card--empty">
                <h3>–ü–æ—Å—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h3>
                <p>–ù–∞ —Ü—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –Ω–µ–º–∞—î –ø–æ—Å—Ç—ñ–≤</p>
            </div>
        );
    }

    const { items, totalPages, remaining } = data;
    const isActionLoading = isLiking || isDisliking || isDeleting;

    return (
        <div>
            {actionError && (
                <ErrorMessage
                    title="–ü–æ–º–∏–ª–∫–∞ –¥—ñ—ó"
                    message={actionError}
                    onClose={() => setActionError("")}
                />
            )}

            <ul className="post-list">
                {items.map((post) => (
                    <li className="post-list__item" key={post.id}>
                        <div className="post-list__title">{post.title}</div>
                        <div className={styles["post-list__actions"]}>
                            <span className="post-list__likes">
                                {post.likesNumber}
                            </span>
                            <button
                                onClick={() => handleLike(post.id)}
                                disabled={isActionLoading}
                                style={{ opacity: isActionLoading ? 0.7 : 1 }}
                            >
                                üëç
                            </button>
                            <span className="post-list__dislikes">
                                {post.dislikesNumber}
                            </span>
                            <button
                                onClick={() => handleDislike(post.id)}
                                disabled={isActionLoading}
                                style={{ opacity: isActionLoading ? 0.7 : 1 }}
                            >
                                üëé
                            </button>
                            <button
                                onClick={() => onSelect(post.id)}
                                disabled={isActionLoading}
                            >
                                –î–µ—Ç–∞–ª—ñ
                            </button>
                            <button
                                onClick={() =>
                                    navigate(`/posts/edit/${post.id}`)
                                }
                                disabled={isActionLoading}
                            >
                                –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
                            </button>
                            <button
                                onClick={() => handleDelete(post.id)}
                                disabled={isActionLoading}
                                style={{
                                    opacity: isActionLoading ? 0.7 : 1,
                                    color: isDeleting
                                        ? "var(--color-accent)"
                                        : "inherit"
                                }}
                            >
                                {isDeleting ? "–í–∏–¥–∞–ª–µ–Ω–Ω—è..." : "–í–∏–¥–∞–ª–∏—Ç–∏"}
                            </button>
                        </div>
                    </li>
                ))}
            </ul>

            {isFetching && (
                <LoadingSpinner
                    message="–û–Ω–æ–≤–ª–µ–Ω–Ω—è..."
                    size="small"
                    showSpinner={false}
                />
            )}

            <hr />
            <div className={styles.pagination}>
                <button
                    className={styles.paginationBtn}
                    onClick={() => setPage((p) => Math.max(p - 1, 1))}
                    disabled={page === 1 || isFetching}
                >
                    &#x25C0;
                </button>
                {[...Array(totalPages)].map((_, i) => (
                    <button
                        key={i}
                        className={
                            page === i + 1
                                ? `${styles.paginationBtn} ${styles.active}`
                                : styles.paginationBtn
                        }
                        onClick={() => setPage(i + 1)}
                        disabled={isFetching}
                    >
                        {i + 1}
                    </button>
                ))}
                <button
                    className={styles.paginationBtn}
                    onClick={() => setPage((p) => (remaining > 0 ? p + 1 : p))}
                    disabled={remaining === 0 || isFetching}
                >
                    &#x25B6;
                </button>
            </div>
        </div>
    );
};

export default PostsList;
